package test.blatt3.tupel;

import static org.junit.Assert.*;

import org.junit.Ignore;
import org.junit.Test;

import test.StudyGroupTest;

public class NaturalNumberTupleTest extends StudyGroupTest {

    private int[] testnumbers = { 0, 2, 2, 5, 1, -1, 2 };
    private int[] testnumbers2 = { 0, 490, -50, -50, 5, 12, -1, 22, 4, 490, 490, 480, 11, -12, 0, 0, 0, 3 };

    private static String NumbersToString(int[] numbers) {
        String result = "{";
        for (int i = 0; i < numbers.length; i++) {
            result += numbers[i];
            result += (i < numbers.length - 1) ? ", " : "}";
        }
        return result;
    }

    private static String standardMessage(String functionName, int[] testnumbers) {
        return functionName + " of a NaturalNumberTupleTest instanciated with " + NumbersToString(testnumbers);
    }

    @Test
    @Ignore
    public void testNaturalNumberTupleIntArray() {
        this.newInstance(testnumbers);
    }

    @Test
    public void testCountNumbers() {
        Object result;

        this.newInstance(testnumbers);
        result = this.run("countNumbers", 1);
        assertEquals(standardMessage("countNumbers(1)", testnumbers), 1, result);

        this.newInstance(testnumbers2);
        result = this.run("countNumbers", 490);
        assertEquals(standardMessage("countNumbers(490)", testnumbers2), 3, result);
    }

    @Test
    public void testEqualsNaturalNumberTuple() {
        Object result;
        this.newInstance(testnumbers);
        result = this.run("equals", this.getAnotherInstance(testnumbers));
        assertEquals(
                standardMessage("equals(new NaturalNumberTuple(new int[]" + NumbersToString(testnumbers) + ")",
                        testnumbers), true, result);
    }

    @Test
    @Ignore
    public void testGetNumber() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    public void testIndexOf() {
        Object result;
        this.newInstance(testnumbers);
        result = this.run("indexOf", 1);
        assertEquals(standardMessage("indexOf(1)", testnumbers), 3, result);
        result = this.run("indexOf", 1);
        assertEquals(standardMessage("indexOf(1) run a second time", testnumbers), 3, result);
        result = this.run("indexOf", 2);
        assertEquals(standardMessage("indexOf(2)", testnumbers), 0, result);
        result = this.run("indexOf", 5);
        assertEquals(standardMessage("indexOf(5)", testnumbers), 2, result);
        result = this.run("indexOf", -2);
        assertEquals(standardMessage("indexOf(-2)", testnumbers), -1, result);
        result = this.run("indexOf", 0);
        assertEquals(standardMessage("indexOf(0)", testnumbers), -1, result);

        this.newInstance(testnumbers2);
        result = this.run("indexOf", 490);
        assertEquals(standardMessage("indexOf(490)", testnumbers2), 0, result);
        result = this.run("indexOf", 0);
        assertEquals(standardMessage("indexOf(0)", testnumbers2), -1, result);
        result = this.run("indexOf", 3);
        assertEquals(standardMessage("indexOf(3)", testnumbers2), 9, result);
    }

    @Test
    @Ignore
    public void testInsert() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testLastIndexOf() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    public void testMax() {
        Object result;
        this.newInstance(testnumbers);
        result = this.run("max");
        assertEquals(standardMessage("max()", testnumbers), 5, result);

        this.newInstance(testnumbers2);
        result = this.run("max");
        assertEquals(standardMessage("max()", testnumbers2), 490, result);
    }

    @Test
    public void testMin() {
        Object result;
        this.newInstance(testnumbers);
        result = this.run("min");
        assertEquals(standardMessage("min()", testnumbers), 1, result);

        this.newInstance(testnumbers2);
        result = this.run("min");
        assertEquals(standardMessage("min()", testnumbers2), 3, result);
    }

    @Test
    @Ignore
    public void testRemove() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testNaturalNumberTuple() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testRemoveNumberAt() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testClone() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testSize() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testSort() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testSwap() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testToSet() {
        fail("Not yet implemented"); // TODO
    }

    @Test
    @Ignore
    public void testToString() {
        fail("Not yet implemented"); // TODO
    }

}
