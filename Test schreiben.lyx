#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter courier
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Tests mit JUnit und TestObject schreiben"
\pdf_author "Joshua Gleitze"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Java,backgroundcolor={\color{white}},basicstyle={\footnotesize\ttfamily},breaklines=true,captionpos=b,commentstyle={\color[rgb]{0.25,0.5,0.37}},escapeinside={\%*}{*)},keywordstyle={\bfseries\color[rgb]{0.5,0,0.33}},stringstyle={\color[rgb]{0.16,0,1}},morecomment={[l][{\color[rgb]{.39,.39,.39}}]{@}},showstringspaces=false,emphstyle={\color[rgb]{0.42,0.24,0.24}},moredelim={[l][{\color[rgb]{.39,.39,.39}}]{@}},moredelim={**[is][\itshape]{~}{~}},tabsize=4,morecomment={[s][{\color[rgb]{0.25,0.37,0.75}}]{/**}{*/}},moredelim={**[is][\bfseries{\color[rgb]{0.5,0.62,0.75}}]{`}{'}},moredelim={**[is][{\color[rgb]{0.5,0.5,0.62}}]{``}{``}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Test mit JUnit und TestObject schreiben.
\end_layout

\begin_layout Author
Joshua Gleitze
\end_layout

\begin_layout Standard
Um Klassen zu testen, eignet sich die Bibliothek 
\noun on
JUnit
\noun default
 gut.
 Diese bietet viele nützliche Funktionen zum Testen von Klassen.
 Um mit unbekannten Klassen und (evtl.
 unvollständigen) Implementierungen umgehen zu können, habe ich zusätzlich
 die Klasse 
\noun on
TestObject
\noun default
 geschrieben.
 Wie man gute Tests schreiben kann, möchte ich hier kurz erläutern.
\end_layout

\begin_layout Section*
Namen in diesem Dokument
\end_layout

\begin_layout Standard
In diesem Dokument verwende ich verschiedene Namen, die ich hier kurz erläutern
 möchte.
\end_layout

\begin_layout Description
getestete
\begin_inset space ~
\end_inset

Klasse Die Klasse, die von einem Test getestet werden soll.
\end_layout

\begin_layout Description
Test,
\begin_inset space ~
\end_inset

Testklasse Der 
\noun on
JUnit
\noun default
-Test, der die getestete Klasse testet.
\end_layout

\begin_layout Description
Implementierte
\begin_inset space ~
\end_inset

Klasse Die getestete Klasse, wie sie sich bei demjenigen, der den Test ausführt,
 befindet.
 Über diese wissen wir 
\emph on
nichts
\emph default
.
\end_layout

\begin_layout Description

\noun on
JUnit
\noun default
 Eine Bibliothek um Klassen zu testen, siehe 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "junit.org"
target "http://junit.org/"

\end_inset


\family default
.
\end_layout

\begin_deeper
\begin_layout Description

\noun on
JUnit-
\noun default
Methoden Die hier vorgestellten Methoden kommen alle aus dem Paket 
\family typewriter

\begin_inset listings
inline true
status open

\begin_layout Plain Layout

org.junit.*
\end_layout

\end_inset


\family default
, die meisten aus 
\family typewriter

\begin_inset listings
inline true
status open

\begin_layout Plain Layout

org.junit.Assert
\end_layout

\end_inset


\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section

\noun on
JUnit
\noun default
-Test in Eclipse erstellen
\end_layout

\begin_layout Standard
Eine Testklasse lässt sich gut in dem Projekt entwickeln, in dem auch die
 getestete Klasse geschrieben wird.
 Hierzu muss zuerst der JUnit-Tests-Ordner zum Projekt hinzugefügt werden,
 wie es in der 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "Anleitung"
target "Anleitung.pdf"
type "file:"

\end_inset


\family default
 beschrieben ist.
 Ein neuer Test lässt sich über Rechtsklick -> New -> JUnit Test Case erstellen.
 Existiert die getestete Klasse bereits, so empfiehlt es sich, den Rechtsklick
 auf diese Klasse auszuführen.
 Dadurch wird Eclipse den Test automatisch benennen und ihm für jede Methode
 in der getesteten Klasse eine Test-Methode hinzufügen.
 Die Optionen im Fenster 
\begin_inset Quotes gld
\end_inset

New JUnit Test Case
\begin_inset Quotes grd
\end_inset

 sollte man wie folgend wählen:
\end_layout

\begin_layout Description
Source
\begin_inset space ~
\end_inset

Folder 
\family typewriter
Projektordner
\family default
/JUnitTests
\end_layout

\begin_layout Description
Package tests.blatt
\family typewriter
x
\family default
.
\family typewriter
name
\family default
 (
\family typewriter
x
\family default
: Nummer des Blatts, 
\family typewriter
name
\family default
: Griffiger Name für die Aufgabe)
\end_layout

\begin_layout Description
Name 
\family typewriter
GetesteteKlasse
\family default
Test
\end_layout

\begin_layout Description
Class
\begin_inset space ~
\end_inset

under
\begin_inset space ~
\end_inset

test ggf.
 die getestete Klasse, um aus ihr Methoden zu übernehmen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename .bilder_schreiben/NewJUnitTestCase1.png
	lyxscale 50
	width 7cm
	groupId New JUnit Test Case

\end_inset


\begin_inset Graphics
	filename .bilder_schreiben/NewJUnitTestCase2.png
	lyxscale 50
	width 7cm
	groupId New JUnit Test Case

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Einstellungen für den Test
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Aufbau eines Tests
\end_layout

\begin_layout Standard
Ein Test sollte für jede Methode der getesteten Klasse, die er testen will,
 eine eigene Methode besitzen.
 Wenn 
\family typewriter
methodName
\family default
 der Name einer zu testeten Methode in der getesteten Klasse ist, sollte
 der Test für sie eine Methode namens test
\family typewriter
MethodName
\family default
 enthalten.
 Eine Test-Methode ist parameterlos, vom Typ 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

void
\end_layout

\end_inset

 wird mit der Annotation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

@Test
\end_layout

\end_inset

 eingeleitet.
 Eine Testklasse sieht beispielsweise so aus:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import static org.junit.Assert.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class FooTest {
\end_layout

\begin_layout Plain Layout

	@Test
\end_layout

\begin_layout Plain Layout

	public void testMethod1() {
\end_layout

\begin_layout Plain Layout

		// do the testing here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Test
\end_layout

\begin_layout Plain Layout

	public void testMethod2() {
\end_layout

\begin_layout Plain Layout

		// do the testing here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// more test methods
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
use_makebox 0
width ""
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Test-Methoden werden in (praktisch) zufälliger Reihenfolge aufgerufen.
 Daher müssen sie vollkommen unabhängig voneinander sein!
\end_layout

\end_inset


\end_layout

\begin_layout Section

\noun on
TestObject
\end_layout

\begin_layout Standard
Die Klasse 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

test.TestObject
\end_layout

\end_inset

 ist ein Stellvertreter für die implementierte Klasse.
 Sie hält einen Verweis auf die implementierte Klasse.
 Sie lässt sich (fast) wie die getestete Klasse instanziieren und man kann
 die Methoden der getesteten Klasse mit 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run()
\end_layout

\end_inset

 und 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

~runStatic~()
\end_layout

\end_inset

 aufrufen.
 Letztere führen eine (statische) Methode aus, deren Name als 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String
\end_layout

\end_inset

 übergeben wird.
 Die Konstruktoren und die run-Methoden können entweder parameterlos oder
 mit einem Parameter aufgerufen werden.
 Will man sie mit mehreren Parametern aufrufen, fasst man die Parameter
 in einem Array vom Typ 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Object[]
\end_layout

\end_inset

 zusammen (Die run-Methoden brauchen als ersten Parameter natürlich immer
 den Namen der Methode):
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "emph={testObject,result1,result2}"
inline false
status open

\begin_layout Plain Layout

TestObject testObject = new TestObject(); // call the standard constructor
 of the implemented class
\end_layout

\begin_layout Plain Layout

Object result1 = testObject.run("foo", 4); // call foo(4) on the instance
 of the implemented class
\end_layout

\begin_layout Plain Layout

Object result2 = TestObject.~runStatic~("bar", new Object[]{3, 9, "bar"});
 // call static bar(3, 9 , "b") on the implemented class
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\noun on
TestObject 
\noun default
gibt ausführliche Fehlermeldungen mit 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

~fail()
\end_layout

\end_inset

 aus, wenn bei der Ausführung eines Konstruktors oder einer Methode ein
 Fehler auftritt.
 Das kann beispielsweise sein, dass keine passende Methode in der implementierte
n Klasse gefunden wurde, dass zwar eine Methode gefunden wurde sie aber
 die falsche Sichtbarkeit hast, oder dass eine Exception bei der Ausführung
 aufgetreten ist.
\end_layout

\begin_layout Standard
Die weiteren Möglichkeiten und Methoden von 
\noun on
TestObject
\noun default
 sind in der 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "ausführlichen JavaDoc-Dokumentation"
target "./doc/index.html"
type "file:"

\end_inset


\family default
 erklärt.
\end_layout

\begin_layout Section

\noun on
JUnit
\end_layout

\begin_layout Standard
Die Verwendung von 
\noun on
JUnit
\noun default
 wird 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "in diesem Artikel"
target "http://www.vogella.com/tutorials/JUnit/article.html#unittesting"

\end_inset


\family default
 sehr gut beschrieben.
 Er enthält auch eine 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "nützliche Tabelle"
target "http://www.vogella.com/tutorials/JUnit/article.html#usingjunit_asserts"

\end_inset


\family default
 der wichtigsten Methoden.
 Selbstverständlich findet man auf 
\family sans

\begin_inset CommandInset href
LatexCommand href
name "junit.org"
target "http://junit.org/"

\end_inset


\family default
 auch umfangreiche Erklärungen.
\end_layout

\begin_layout Section
Dokumentation
\end_layout

\begin_layout Standard
Damit ein Test auch von anderen überprüft und von dem, der ihn ausführt,
 verstanden werden kann, ist eine detailliert Dokumentation wichtig.
 Diese sollte grundsätzlich in englischer Sprache verfasst werden.
 Ein Test, der die Klasse 
\noun on
[Name]
\noun default
 der Aufgabe 
\noun on
[X]
\noun default
 überprüft und von 
\noun on
[Autor]
\noun default
 geschrieben wurde, könnte diesen Javadoc-Kommentar erhalten:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * A test for [Name] (Task [X]) <br> 
\end_layout

\begin_layout Plain Layout

 * <br> 
\end_layout

\begin_layout Plain Layout

 * People that checked this test for being correct and complete:
\end_layout

\begin_layout Plain Layout

 * <ul> 
\end_layout

\begin_layout Plain Layout

 *      <li>[Autor]</li> 
\end_layout

\begin_layout Plain Layout

 * </ul>
\end_layout

\begin_layout Plain Layout

 * <br><br> 
\end_layout

\begin_layout Plain Layout

 * Things that are currently not tested, but should be: 
\end_layout

\begin_layout Plain Layout

 * <ul>
\end_layout

\begin_layout Plain Layout

 *      <li>...</li> 
\end_layout

\begin_layout Plain Layout

 * </ul>
\end_layout

\begin_layout Plain Layout

 *  
\end_layout

\begin_layout Plain Layout

 * @author [Name]
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eine Test-Methode, die die Methode 
\noun on
[name]
\noun default
 mit den Parametern 
\noun on
(x) 
\noun default
der implementierten Klasse auf die Eigenschaften 
\noun on
[prop1]
\noun default
, 
\noun on
[prop2]
\noun default
, … testet, könnte den folgenden Javadoc-Kommentar erhalten:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/**     
\end_layout

\begin_layout Plain Layout

 * Tests the {@code [name](x)} method.
 Asserts that:     
\end_layout

\begin_layout Plain Layout

 * <ul>      
\end_layout

\begin_layout Plain Layout

 *      <li>[prop1]</li>     
\end_layout

\begin_layout Plain Layout

 *      <li>[prop2]</li>
\end_layout

\begin_layout Plain Layout

 *      <li>...</li>
\end_layout

\begin_layout Plain Layout

 * </ul>     
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Beispiele
\end_layout

\begin_layout Subsection*
Üblicher Aufbau einer Methode
\end_layout

\begin_layout Standard
Ein üblicher Ablauf einer Test-Methode wäre, ein 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TestObject
\end_layout

\end_inset

 zu instanziieren, eine Methode darauf auszuführen und das Ergebnis der
 Operation auszugeben:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
lstparams "emph={testObject,result,expected}"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testRemove() {
\end_layout

\begin_layout Plain Layout

	TestObject testObject;  // holds an instance of the tested class
\end_layout

\begin_layout Plain Layout

	Object result;          // the result of doSomething()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	testObject = new TestObject(); // get the instance of the tested class
\end_layout

\begin_layout Plain Layout

	result = testObject.run('doSomething'); //run the method doSomething()
\end_layout

\begin_layout Plain Layout

	~assertEquals~("doSomething() is supposed to do this and that", expected,
 result); //check the result of doSomething()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
main() aufrufen und System.out lesen
\end_layout

\begin_layout Standard
Die main-Methode einer Java-Klasse erwartet als einzigen Parameter einen
 Array vom Typ String.
 Übergibt man einer run-Methode aber einen 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String[]
\end_layout

\end_inset

-Array, so wählt der Java-Compiler die run-Methode mit der Signatur 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Object[] parameters
\end_layout

\end_inset

 aus und übergibt jeden String einzeln an die Methode.
 Daher casted man den 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String[]
\end_layout

\end_inset

-Array davor explizit zu 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Object
\end_layout

\end_inset

.
 Um die Ausgabe einer Klasse ins Terminal zu überprüfen, kann man die Hilfsklass
e 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

test.Sysout
\end_layout

\end_inset

 verwenden.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "emph={output, par1, par2,outputLines,i,expectedResults}"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testMain() {
\end_layout

\begin_layout Plain Layout

	String output;
\end_layout

\begin_layout Plain Layout

	String[] outputLines;
\end_layout

\begin_layout Plain Layout

	String[] expectedResults = new String[] {
\end_layout

\begin_layout Plain Layout

		/* ...
 */
\end_layout

\begin_layout Plain Layout

	};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Sysout.~observe~(); // start observing the Sysout
\end_layout

\begin_layout Plain Layout

	TestObject.~runStatic~("main", (Object) new String[]{par1, par2}); // run
 main
\end_layout

\begin_layout Plain Layout

	output = Sysout.~getAll~(); // get what was written to the Sysout
\end_layout

\begin_layout Plain Layout

	Sysout.~stopObserving~(); // Resets everything.
 Never forget to stop observing!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// If the program outputs multiple lines, it's wise to check it line by
 line, to provide more detailed error messages
\end_layout

\begin_layout Plain Layout

	outputLines = output.split("
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* 
\end_layout

\begin_layout Plain Layout

	 * You should definitely check your arrays here! Otherwise
\end_layout

\begin_layout Plain Layout

	 * the next part might throw NullPointerExceptions.
 And you
\end_layout

\begin_layout Plain Layout

	 * never ever want such Exceptions in a test method!
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < outputLines.length; i++) {
\end_layout

\begin_layout Plain Layout

		~assertEquals~("message", expectedResults[i], outputLines[i]);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Optionale Methode testen 
\end_layout

\begin_layout Standard

\noun on
TestObject
\noun default
 gibt selbständig ausführliche Fehlermeldungen über die 
\noun on
JUnit
\noun default
-Methode 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

~fail~()
\end_layout

\end_inset

 aus, wenn etwas schief läuft.
 So auch, wenn eine Methode mit den run-Methoden aufgerufen wird, die in
 der implementierten Klasse nicht vorhanden ist.
 Möchte man eine Methode testen, deren Implementierung nicht vorausgesetzt
 werden kann, so kann man 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TestObject.~hasMethod~()
\end_layout

\end_inset

 verwenden:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "emph={testObject,result,expected}"
inline false
status open

\begin_layout Plain Layout

/* 
\end_layout

\begin_layout Plain Layout

 * test only if the method is implemented.
 If the method is not
\end_layout

\begin_layout Plain Layout

 * implemented, no error message is created.
 Only if it is present
\end_layout

\begin_layout Plain Layout

 * but not working properly, this test will fail.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testFoo() {
\end_layout

\begin_layout Plain Layout

	if (TestObject.~hasMethod~("foo")) {
\end_layout

\begin_layout Plain Layout

		TestObject testObject;
\end_layout

\begin_layout Plain Layout

		Object result;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		testObject = new TestObject();
\end_layout

\begin_layout Plain Layout

		result = testObject.run("foo");
\end_layout

\begin_layout Plain Layout

		~assertEquals~("message", expected, result);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Package und Konstruktor überprüfen
\end_layout

\begin_layout Standard
Mit 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TestObject.~getPackageName~()
\end_layout

\end_inset

 kann das Package der implementierten Klasse geprüft werden.
 Dies kann man in einer eigenen Test-Methode machen.
 Jene, die den Konstruktor prüft, ist aber auch gut hierfür geeignet.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "emph={testObject}"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testFoo() {
\end_layout

\begin_layout Plain Layout

	TestObject testObject;
\end_layout

\begin_layout Plain Layout

	testObject = new TestObject("input"); // if there is no such constructor
 or anything fails while running it, TestObject will output error messages
 for us.
\end_layout

\begin_layout Plain Layout

	~assertNotNull~("message", testObject); // check that the constructor really
 did its job
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Test only that a package is set:
\end_layout

\begin_layout Plain Layout

	~assertNotNull~("You are not allowed to use the default package!", TestObject.~g
etPackageName~());
\end_layout

\begin_layout Plain Layout

	// Test that the package is a specific one:
\end_layout

\begin_layout Plain Layout

	~assertEquals~("Please set the package name correctly!", "edu.kit.informatik",
 TestObject.~getPackageName~());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
